name: Deploy

on:
  push:
    branches: [ master ]

env:
  IMAGE_URL: registry.digitalocean.com/ripplr/ripplr-api

jobs:
  upload-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build image
        run: docker build . -t ${IMAGE_URL}:${GITHUB_SHA:0:8} -t ${IMAGE_URL}:latest

      - name: Upload image to registry
        run: |
          doctl registry login
          docker push ${IMAGE_URL}

  run-migrations:
    runs-on: ubuntu-latest
    needs: upload-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ripplr

      - name: Run migration
        run: kubectl create -f kube/jobs/migrate.yml

      - name: Wait for job status
        run: kubectl wait --for=condition=complete job/migrate

      - name: Delete older migration jobs
        run: kubectl delete job migrate

  deploy:
    runs-on: ubuntu-latest
    needs: run-migrations
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ripplr

      - name: Deploy
        run: |
          kubectl set image deployment/ripplr-api ripplr-api=${IMAGE_URL}:${GITHUB_SHA:0:8}
          kubectl set image deployment/sidekiq sidekiq=${IMAGE_URL}:${GITHUB_SHA:0:8}
          kubectl set image deployment/terminal terminal=${IMAGE_URL}:${GITHUB_SHA:0:8}

      - name: Verify deployment
        run: kubectl rollout status deployment/ripplr-api

  slack-notifications-success:
    if: success()
    runs-on: ubuntu-latest
    needs:
      - upload-image
      - run-migrations
      - deploy
    steps:
      - name: Send slack notifications
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{secrets.SLACK_DEPLOY_WEBHOOK}}
          name: 'API Deployed!'
          icon_emoji: ':rocket:'

  slack-notifications-failure:
    if: failure()
    runs-on: ubuntu-latest
    needs:
      - upload-image
      - run-migrations
      - deploy
    steps:
      - name: Send slack notifications
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{secrets.SLACK_DEPLOY_WEBHOOK}}
          name: 'API Deployment Failed!'
          icon_emoji: ':collision:'
